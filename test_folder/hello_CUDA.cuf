
      module mathOps
      contains
      attributes(global) subroutine saxpy(x, y, a)
      implicit none
      real :: x(:), y(:)
      real, value :: a
      integer :: i, n
      n = size(x)
      i = blockDim%x * (blockIdx%x - 1) + threadIdx%x
      if (i <= n) y(i) = y(i) + a*x(i)
      end subroutine saxpy 
      end module mathOps

      program hello_CUDA
      use cudafor
      use mathOps
      !implicit none
      integer, parameter :: N = 40000
      real :: x(N), y(N), a
      real, device :: x_d(N), y_d(N)
      type(dim3) :: grid, tBlock

      print*,'Hello CUDA'

      tBlock = dim3(256,1,1)
      grid = dim3(ceiling(real(N)/tBlock%x),1,1)

      print*,'grid, tBlock defined' 

      x = 1.0
      y = 2.0
      a = 2.0
      x_d = x
      y_d = y

      !x = y + a + x
      print*,'Data x, y, a loaded to device:',x(1),y(1),a

      call saxpy<<<grid, tBlock>>>(x_d, y_d, a)
      y = y_d
      write(*,*) 'Max error: ', maxval(abs(y-4.0))

      nout=0
      do i =1,N
       if(abs(y(i)-4.0).lt.0.0001)nout=nout+1
      enddo
      print*,'nout=',nout
      end
